#!/usr/bin/env python3

# print and plot averaged time stats generated by InfiniTAM

import csv
import matplotlib.pyplot as plt
import numpy as np
import os.path
import sys

from common import *

keys = ["copyImages", "bilateralFilter", "normalEstimation", "tracking", "buildingVisibilityList", "allocation",
"carving", "fusion", "rendering", "renderingTSDF", "swapping"]

def read_data(path):
    data = {}
    with open(path, newline='\n') as csvfile:
        # csvreader = csv.reader(SkipCommentsReader(csvfile), delimiter=' ')
        csvreader = csv.reader(csvfile, delimiter=' ')
        column_names = next(csvreader)[1:]
        for c in column_names:
            data[c] = []
        for row in csvreader:
            for i in range(len(row)):
                data[column_names[i]].append(1000 * float(row[i]))
    return data

def plot_mean_time(data, path=None):
    plt.clf()

    width = 0.25
    ind = []
    for i in range(0, len(data)):
        ind.append(i)

    bars = []
    mean_bottom = np.array([0] * len(data))
    for k in keys:
        data_mean = [np.mean(np.array(d[k])) for d in data]

        bars.append(plt.bar(ind, data_mean, width, bottom=mean_bottom))
        mean_bottom = np.add(mean_bottom, data_mean)

    plt.ylabel("update time [ms]")
    plt.xlabel("dataset")
    plt.tick_params(
        axis='x',  # changes apply to the x-axis
        which='both',  # both major and minor ticks are affected
        bottom=False,  # ticks along the bottom edge are off
        top=False,  # ticks along the top edge are off
    )
    plt.xticks([r for r in range(len(data))], [str(x) for x in range(len(data))])

    # handles, labels = axis.get_legend_handles_labels()
    # axis.legend(reversed(handles), reversed(labels), loc='upper left')
    plt.legend(keys, loc="upper right")
    if path:
        plt.savefig(path, dpi=DPI)
    plt.show()


def compute_statistics(data):
    statistics = []
    for k in keys:
        data_mean = [np.mean(np.array(d[k])) for d in data]
        data_max = [np.max(np.array(d[k])) for d in data]
        print(k, data_mean, data_max)

def main():
    os.makedirs(output_plot_dir, exist_ok=True)

    data = [read_data(sys.argv[1])] # array of possibly multiple files

    compute_statistics(data)
    plot_mean_time(data, os.path.join(output_plot_dir, "mean_time.png"))

if __name__ == "__main__":
    main()
