// InfiniTAM: Surffuse. Copyright (c) Torr Vision Group and the authors of InfiniTAM, 2016.

#include "ITMSurfelSceneReconstructionEngine_CUDA.h"

#ifdef _MSC_VER
  // Suppress some VC++ warnings that are produced when including the Thrust headers.
  #pragma warning(disable:4267)
#else
  // Suppress some GCC warnings that are produced when including the Thrust headers.
  #pragma GCC diagnostic ignored "-Wunused-private-field"
#endif

#include <thrust/device_ptr.h>
#include <thrust/scan.h>
#include <thrust/sort.h>

// Reenable the suppressed warnings for the rest of the translation unit.
#ifdef _MSC_VER
  #pragma warning(default:4267)
#else
  #pragma GCC diagnostic warning "-Wunused-private-field"
#endif

#include "../Shared/ITMSurfelSceneReconstructionEngine_Shared.h"

#define DEBUGGING 0

namespace ITMLib
{

//#################### CUDA KERNELS ####################

template <typename TSurfel>
__global__ void ck_add_new_surfel(int pixelCount, Matrix4f T, int timestamp, const unsigned short *newPointsMask, const unsigned int *newPointsPrefixSum,
                                  const Vector4f *vertexMap, const Vector3f *normalMap, const float *radiusMap, const Vector4u *colourMap,
                                  int depthMapWidth, int depthMapHeight, int colourMapWidth, int colourMapHeight,
                                  Matrix4f depthToRGB, Vector4f projParamsRGB, bool useGaussianSampleConfidence, float gaussianConfidenceSigma,
                                  float maxSurfelRadius, TSurfel *newSurfels)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    add_new_surfel(
      locId, T, timestamp, newPointsMask, newPointsPrefixSum, vertexMap, normalMap, radiusMap, colourMap,
      depthMapWidth, depthMapHeight, colourMapWidth, colourMapHeight,
      depthToRGB, projParamsRGB, useGaussianSampleConfidence, gaussianConfidenceSigma,
      maxSurfelRadius, newSurfels
    );
  }
}

__global__ void ck_calculate_normal(int pixelCount, const Vector4f *vertexMap, int width, int height, Vector3f *normalMap)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    calculate_normal(locId, vertexMap, width, height, normalMap);
  }
}

__global__ void ck_calculate_radius(int pixelCount, const float *depthMap, const Vector3f *normalMap, ITMIntrinsics intrinsics, float *radiusMap)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    calculate_radius(locId, depthMap, normalMap, intrinsics, radiusMap);
  }
}

__global__ void ck_calculate_vertex_position(int pixelCount, int width, ITMIntrinsics intrinsics, const float *depthMap, Vector4f *vertexMap)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    calculate_vertex_position(locId, width, intrinsics, depthMap, vertexMap);
  }
}

__global__ void ck_clear_merge_target(int pixelCount, unsigned int *mergeTargetMap)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    clear_merge_target(locId, mergeTargetMap);
  }
}

__global__ void ck_clear_removal_mask_entry(int surfelCount, unsigned int *surfelRemovalMask)
{
  int surfelId = threadIdx.x + blockDim.x * blockIdx.x;
  if(surfelId < surfelCount)
  {
    clear_removal_mask_entry(surfelId, surfelRemovalMask);
  }
}

template <typename TSurfel>
__global__ void ck_find_corresponding_surfel(int pixelCount, Matrix4f invT, const float *depthMap, int depthMapWidth, const Vector3f *normalMap, const unsigned int *indexMap,
                                             int supersamplingFactor, const TSurfel *surfels, unsigned int *correspondenceMap, unsigned short *newPointsMask)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    find_corresponding_surfel(locId, invT, depthMap, depthMapWidth, normalMap, indexMap, supersamplingFactor, surfels, correspondenceMap, newPointsMask);
  }
}

template <typename TSurfel>
__global__ void ck_find_mergeable_surfel(int pixelCount, const unsigned int *indexImage, int indexImageWidth, int indexImageHeight, const unsigned int *correspondenceMap,
                                         const TSurfel *surfels, float stableSurfelConfidence, float maxMergeDist, float maxMergeAngle, float minRadiusOverlapFactor,
                                         unsigned int *mergeTargetMap)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    find_mergeable_surfel(locId, indexImage, indexImageWidth, indexImageHeight, correspondenceMap, surfels, stableSurfelConfidence, maxMergeDist, maxMergeAngle, minRadiusOverlapFactor, mergeTargetMap);
  }
}

template <typename TSurfel>
__global__ void ck_fuse_matched_point(int pixelCount, const unsigned int *correspondenceMap, Matrix4f T, int timestamp,
                                      const Vector4f *vertexMap, const Vector3f *normalMap, const float *radiusMap, const Vector4u *colourMap,
                                      int depthMapWidth, int depthMapHeight, int colourMapWidth, int colourMapHeight,
                                      Matrix4f depthToRGB, Vector4f projParamsRGB, float deltaRadius,
                                      bool useGaussianSampleConfidence, float gaussianConfidenceSigma, float maxSurfelRadius,
                                      TSurfel *surfels)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    fuse_matched_point(
      locId, correspondenceMap, T, timestamp, vertexMap, normalMap, radiusMap, colourMap, depthMapWidth, depthMapHeight, colourMapWidth, colourMapHeight,
      depthToRGB, projParamsRGB, deltaRadius, useGaussianSampleConfidence, gaussianConfidenceSigma, maxSurfelRadius, surfels
    );
  }
}

template <typename TSurfel>
__global__ void ck_mark_for_removal_if_unstable(int surfelCount, const TSurfel *surfels, int timestamp, float stableSurfelConfidence,
                                                int unstableSurfelPeriod, unsigned int *surfelRemovalMask)
{
  int surfelId = threadIdx.x + blockDim.x * blockIdx.x;
  if(surfelId < surfelCount)
  {
    mark_for_removal_if_unstable(surfelId, surfels, timestamp, stableSurfelConfidence, unstableSurfelPeriod, surfelRemovalMask);
  }
}

template <typename TSurfel>
__global__ void ck_perform_surfel_merge(int pixelCount, unsigned int *mergeTargetMap, TSurfel *surfels, unsigned int *surfelRemovalMask, const unsigned int *indexImage,
                                        float maxSurfelRadius)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    perform_surfel_merge(locId, mergeTargetMap, surfels, surfelRemovalMask, indexImage, maxSurfelRadius);
  }
}

__global__ void ck_prevent_merge_chain(int pixelCount, unsigned int *mergeTargetMap)
{
  int locId = threadIdx.x + blockDim.x * blockIdx.x;
  if(locId < pixelCount)
  {
    prevent_merge_chain(locId, mergeTargetMap);
  }
}

//#################### CONSTRUCTORS ####################

template <typename TSurfel>
ITMSurfelSceneReconstructionEngine_CUDA<TSurfel>::ITMSurfelSceneReconstructionEngine_CUDA(const Vector2i& depthImageSize)
: ITMSurfelSceneReconstructionEngine<TSurfel>(depthImageSize)
{}

//#################### PRIVATE MEMBER FUNCTIONS ####################

template <typename TSurfel>
void ITMSurfelSceneReconstructionEngine_CUDA<TSurfel>::AddNewSurfels(ITMSurfelScene<TSurfel> *scene, const ITMView *view, const ITMTrackingState *trackingState) const
{
  // Calculate the prefix sum of the new points mask.
  const unsigned short *newPointsMask = this->m_newPointsMaskMB->GetData(MEMORYDEVICE_CUDA);
  unsigned int *newPointsPrefixSum = this->m_newPointsPrefixSumMB->GetData(MEMORYDEVICE_CUDA);
  const int pixelCount = static_cast<int>(this->m_newPointsMaskMB->dataSize - 1);
  thrust::device_ptr<const unsigned short> newPointsMaskBegin(newPointsMask);
  thrust::device_ptr<unsigned int> newPointsPrefixSumBegin(newPointsPrefixSum);
  thrust::exclusive_scan(newPointsMaskBegin, newPointsMaskBegin + (pixelCount + 1), newPointsPrefixSumBegin);

#if DEBUGGING
  this->m_newPointsPrefixSumMB->UpdateHostFromDevice();
#endif

  // Add the new surfels to the scene.
  const size_t newSurfelCount = static_cast<size_t>(this->m_newPointsPrefixSumMB->GetElement(pixelCount, MEMORYDEVICE_CUDA));
  TSurfel *newSurfels = scene->AllocateSurfels(newSurfelCount);
  const ITMSurfelSceneParams& sceneParams = scene->GetParams();
  if(newSurfels == NULL) return;

  int threadsPerBlock = 256;
  int numBlocks = (pixelCount + threadsPerBlock - 1) / threadsPerBlock;

  ck_add_new_surfel<<<numBlocks,threadsPerBlock>>>(
    pixelCount,
    trackingState->pose_d->GetInvM(),
    this->m_timestamp,
    newPointsMask,
    newPointsPrefixSum,
    this->m_vertexMapMB->GetData(MEMORYDEVICE_CUDA),
    this->m_normalMapMB->GetData(MEMORYDEVICE_CUDA),
    this->m_radiusMapMB->GetData(MEMORYDEVICE_CUDA),
    view->rgb->GetData(MEMORYDEVICE_CUDA),
    view->depth->noDims.x,
    view->depth->noDims.y,
    view->rgb->noDims.x,
    view->rgb->noDims.y,
    view->calib.trafo_rgb_to_depth.calib_inv,
    view->calib.intrinsics_rgb.projectionParamsSimple.all,
    sceneParams.useGaussianSampleConfidence,
    sceneParams.gaussianConfidenceSigma,
    sceneParams.maxSurfelRadius,
    newSurfels
  );
  ORcudaKernelCheck;

#if DEBUGGING
  scene->GetSurfels()->UpdateHostFromDevice();
#endif
}

template <typename TSurfel>
void ITMSurfelSceneReconstructionEngine_CUDA<TSurfel>::FindCorrespondingSurfels(const ITMSurfelScene<TSurfel> *scene, const ITMView *view, const ITMTrackingState *trackingState,
                                                                                const ITMSurfelRenderState *renderState) const
{
  const int pixelCount = static_cast<int>(view->depth->dataSize);

  int threadsPerBlock = 256;
  int numBlocks = (pixelCount + threadsPerBlock - 1) / threadsPerBlock;

  ck_find_corresponding_surfel<<<numBlocks,threadsPerBlock>>>(
    pixelCount,
    trackingState->pose_d->GetM(),
    view->depth->GetData(MEMORYDEVICE_CUDA),
    view->depth->noDims.x,
    this->m_normalMapMB->GetData(MEMORYDEVICE_CUDA),
    renderState->GetIndexImageSuper()->GetData(MEMORYDEVICE_CUDA),
    scene->GetParams().supersamplingFactor,
    scene->GetSurfels()->GetData(MEMORYDEVICE_CUDA),
    this->m_correspondenceMapMB->GetData(MEMORYDEVICE_CUDA),
    this->m_newPointsMaskMB->GetData(MEMORYDEVICE_CUDA)
  );
  ORcudaKernelCheck;

#if DEBUGGING
  this->m_correspondenceMapMB->UpdateHostFromDevice();
  this->m_newPointsMaskMB->UpdateHostFromDevice();
#endif
}

template <typename TSurfel>
void ITMSurfelSceneReconstructionEngine_CUDA<TSurfel>::FuseMatchedPoints(ITMSurfelScene<TSurfel> *scene, const ITMView *view, const ITMTrackingState *trackingState) const
{
  const int pixelCount = static_cast<int>(view->depth->dataSize);

  int threadsPerBlock = 256;
  int numBlocks = (pixelCount + threadsPerBlock - 1) / threadsPerBlock;

  const ITMSurfelSceneParams& sceneParams = scene->GetParams();

  ck_fuse_matched_point<<<numBlocks,threadsPerBlock>>>(
    pixelCount,
    this->m_correspondenceMapMB->GetData(MEMORYDEVICE_CUDA),
    trackingState->pose_d->GetInvM(),
    this->m_timestamp,
    this->m_vertexMapMB->GetData(MEMORYDEVICE_CUDA),
    this->m_normalMapMB->GetData(MEMORYDEVICE_CUDA),
    this->m_radiusMapMB->GetData(MEMORYDEVICE_CUDA),
    view->rgb->GetData(MEMORYDEVICE_CUDA),
    view->depth->noDims.x,
    view->depth->noDims.y,
    view->rgb->noDims.x,
    view->rgb->noDims.y,
    view->calib.trafo_rgb_to_depth.calib_inv,
    view->calib.intrinsics_rgb.projectionParamsSimple.all,
    sceneParams.deltaRadius,
    sceneParams.useGaussianSampleConfidence,
    sceneParams.gaussianConfidenceSigma,
    sceneParams.maxSurfelRadius,
    scene->GetSurfels()->GetData(MEMORYDEVICE_CUDA)
  );
  ORcudaKernelCheck;
}

template <typename TSurfel>
void ITMSurfelSceneReconstructionEngine_CUDA<TSurfel>::MarkBadSurfels(ITMSurfelScene<TSurfel> *scene) const
{
  const int surfelCount = static_cast<int>(scene->GetSurfelCount());

  // If the scene is empty, early out.
  if(surfelCount == 0) return;

  const ITMSurfelSceneParams& sceneParams = scene->GetParams();
  unsigned int *surfelRemovalMask = this->m_surfelRemovalMaskMB->GetData(MEMORYDEVICE_CUDA);
  TSurfel *surfels = scene->GetSurfels()->GetData(MEMORYDEVICE_CUDA);

  int threadsPerBlock = 256;
  int numBlocks = (surfelCount + threadsPerBlock - 1) / threadsPerBlock;

  // Clear the surfel removal mask.
  ck_clear_removal_mask_entry<<<numBlocks,threadsPerBlock>>>(
    surfelCount,
    surfelRemovalMask
  );
  ORcudaKernelCheck;

  // Mark long-term unstable surfels for removal.
  ck_mark_for_removal_if_unstable<<<numBlocks,threadsPerBlock>>>(
    surfelCount,
    surfels,
    this->m_timestamp,
    sceneParams.stableSurfelConfidence,
    sceneParams.unstableSurfelPeriod,
    surfelRemovalMask
  );
  ORcudaKernelCheck;

#if DEBUGGING
  scene->GetSurfels()->UpdateHostFromDevice();
  this->m_surfelRemovalMaskMB->UpdateHostFromDevice();
#endif
}

template <typename TSurfel>
void ITMSurfelSceneReconstructionEngine_CUDA<TSurfel>::MergeSimilarSurfels(ITMSurfelScene<TSurfel> *scene, const ITMSurfelRenderState *renderState) const
{
  const unsigned int *correspondenceMap = this->m_correspondenceMapMB->GetData(MEMORYDEVICE_CUDA);
  const unsigned int *indexImage = renderState->GetIndexImage()->GetData(MEMORYDEVICE_CUDA);
  const int indexImageHeight = renderState->GetIndexImage()->noDims.y;
  const int indexImageWidth = renderState->GetIndexImage()->noDims.x;
  unsigned int *mergeTargetMap = this->m_mergeTargetMapMB->GetData(MEMORYDEVICE_CUDA);
  const int pixelCount = static_cast<int>(renderState->GetIndexImage()->dataSize);
  const ITMSurfelSceneParams& sceneParams = scene->GetParams();
  TSurfel *surfels = scene->GetSurfels()->GetData(MEMORYDEVICE_CUDA);
  unsigned int *surfelRemovalMask = this->m_surfelRemovalMaskMB->GetData(MEMORYDEVICE_CUDA);

  // Clear the merge target map.
  int threadsPerBlock = 256;
  int numBlocks = (pixelCount + threadsPerBlock - 1) / threadsPerBlock;

  ck_clear_merge_target<<<numBlocks,threadsPerBlock>>>(pixelCount, mergeTargetMap);
  ORcudaKernelCheck;

  // Find pairs of surfels that can be merged.
  ck_find_mergeable_surfel<<<numBlocks,threadsPerBlock>>>(
    pixelCount,
    indexImage,
    indexImageWidth,
    indexImageHeight,
    correspondenceMap,
    surfels,
    sceneParams.stableSurfelConfidence,
    sceneParams.maxMergeDist,
    sceneParams.maxMergeAngle,
    sceneParams.minRadiusOverlapFactor,
    mergeTargetMap
  );
  ORcudaKernelCheck;

  // Prevent any merge chains.
  ck_prevent_merge_chain<<<numBlocks,threadsPerBlock>>>(pixelCount, mergeTargetMap);
  ORcudaKernelCheck;

  // Merge the relevant surfels.
  ck_perform_surfel_merge<<<numBlocks,threadsPerBlock>>>(pixelCount, mergeTargetMap, surfels, surfelRemovalMask, indexImage, sceneParams.maxSurfelRadius);
  ORcudaKernelCheck;
}

template <typename TSurfel>
void ITMSurfelSceneReconstructionEngine_CUDA<TSurfel>::PreprocessDepthMap(const ITMView *view, const ITMSurfelSceneParams& sceneParams) const
{
  const float *depthMap = view->depth->GetData(MEMORYDEVICE_CUDA);
  const int height = view->depth->noDims.y;
  const ITMIntrinsics& intrinsics = view->calib.intrinsics_d;
  Vector3f *normalMap = this->m_normalMapMB->GetData(MEMORYDEVICE_CUDA);
  const int pixelCount = static_cast<int>(view->depth->dataSize);
  float *radiusMap = this->m_radiusMapMB->GetData(MEMORYDEVICE_CUDA);
  Vector4f *vertexMap = this->m_vertexMapMB->GetData(MEMORYDEVICE_CUDA);
  const int width = view->depth->noDims.x;

  // Calculate the vertex map.
  int threadsPerBlock = 256;
  int numBlocks = (pixelCount + threadsPerBlock - 1) / threadsPerBlock;

  ck_calculate_vertex_position<<<numBlocks,threadsPerBlock>>>(
    pixelCount,
    width,
    intrinsics,
    depthMap,
    vertexMap
  );
  ORcudaKernelCheck;

#if DEBUGGING
  this->m_vertexMapMB->UpdateHostFromDevice();
#endif

  // Calculate the normal map.
  ck_calculate_normal<<<numBlocks,threadsPerBlock>>>(
    pixelCount,
    vertexMap,
    width,
    height,
    normalMap
  );
  ORcudaKernelCheck;

#if DEBUGGING
  this->m_normalMapMB->UpdateHostFromDevice();
#endif

  // Calculate the radius map.
  ck_calculate_radius<<<numBlocks,threadsPerBlock>>>(
    pixelCount,
    depthMap,
    normalMap,
    intrinsics,
    radiusMap
  );
  ORcudaKernelCheck;

#if DEBUGGING
  this->m_radiusMapMB->UpdateHostFromDevice();
#endif
}

template <typename TSurfel>
void ITMSurfelSceneReconstructionEngine_CUDA<TSurfel>::RemoveMarkedSurfels(ITMSurfelScene<TSurfel> *scene) const
{
  const int surfelCount = static_cast<int>(scene->GetSurfelCount());

  // If the scene is empty, early out.
  if(surfelCount == 0) return;

  unsigned int *surfelRemovalMask = this->m_surfelRemovalMaskMB->GetData(MEMORYDEVICE_CUDA);
  TSurfel *surfels = scene->GetSurfels()->GetData(MEMORYDEVICE_CUDA);

  thrust::device_ptr<unsigned int> surfelRemovalMaskBegin(surfelRemovalMask);
  thrust::device_ptr<unsigned int> surfelRemovalMaskEnd = surfelRemovalMaskBegin + surfelCount;
  thrust::device_ptr<TSurfel> surfelsBegin(surfels);
  thrust::sort_by_key(surfelRemovalMaskBegin, surfelRemovalMaskEnd, surfelsBegin);
  scene->DeallocateRemovedSurfels(thrust::reduce(surfelRemovalMaskBegin, surfelRemovalMaskEnd));
}

}
